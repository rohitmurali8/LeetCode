/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* mergedlist = new ListNode;
        ListNode* temp = mergedlist;
        if (l1 == NULL && l2 == NULL){
            cout << "null" << "\n";
            temp->next = NULL;
        }
        
        /*else if (l1 == NULL || l2 == NULL){
            cout << "zero" << "\n";
            temp->next = new ListNode(0);
        }*/
        
        else if (l1 == NULL && l2 != NULL){
            cout << "entering loop l2" << endl;
            return l2;
        }
        
        else if (l1 != NULL && l2 == NULL){
            cout << "entering loop l1" << endl;
            return l1;
        }
        
        while(l1 != NULL || l2 != NULL){
            
            if(l1->val >= l2->val){
                temp->next = new ListNode(l2->val);
                temp = temp->next;
                l2 = l2->next;
                temp->next = new ListNode(l1->val);
                temp = temp->next;
                l1 = l1->next;
            }
            
            else {
                temp->next = new ListNode(l1->val);
                temp = temp->next;
                l1 = l1->next;
                temp->next = new ListNode(l2->val);
                temp = temp->next;
                l2 = l2->next;
            }
            
        }
        
        return mergedlist->next;
        
    }
};